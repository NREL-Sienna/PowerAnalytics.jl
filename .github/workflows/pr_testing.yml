name: Test-CI
env:
  SIENNA_PKGS: 'InfrastructureSystems.jl PowerSystems.jl PowerSystemCaseBuilder.jl PowerNetworkMatrices.jl HydroPowerSimulations.jl StorageSystemsSimulations.jl PowerFlows.jl PowerSimulations.jl'
  UPLOAD_DIR: upload/dependencies
  GKS_ENCODING: "utf8"
  GKSwstype: "100"
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v2

      - name: Generate cache key
        id: cache-key
        run: echo "key=env-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Clone Sienna packages
        run: |
          rm -rf "${UPLOAD_DIR}"
          mkdir -p "${UPLOAD_DIR}"
          cd "${UPLOAD_DIR}"
          # Function to choose appropriate branch
          select_branch() {
            local repo="$1"
            local source_branch="$2"
            local target_branch="$3"
            local fallback_branch="main"

            if git ls-remote --heads "https://github.com/NREL-Sienna/$repo.git" "$source_branch" | grep -q "$source_branch"; then
              echo "$source_branch"
            elif git ls-remote --heads "https://github.com/NREL-Sienna/$repo.git" "$target_branch" | grep -q "$target_branch"; then
              echo "$target_branch"
            else
              echo "$fallback_branch"
            fi
          }

          source_branch="${{ github.head_ref }}"
          target_branch="${{ github.base_ref }}"
          IFS=' ' read -r -a repos <<< "$SIENNA_PKGS"
          for repo in "${repos[@]}"; do
            branch=$(select_branch "$repo" "$source_branch" "$target_branch")
            echo " - Cloning $repo on branch $branch..."
            git clone --branch "$branch" --single-branch "https://github.com/NREL-Sienna/$repo.git"
          done

      - uses: julia-actions/setup-julia@latest
        with:
          version: '1'
          arch: x64

      - name: Dev Sienna packages
        env:
          JULIA_PKG_PRECOMPILE_AUTO: "0"
        run: |
          julia -e '
          using Pkg
          pkgs = split(ENV["SIENNA_PKGS"])
          upload_dir = ENV["UPLOAD_DIR"]
          # For each package, dev all other packages (not itself), all at once
          for pkg in pkgs
          Pkg.activate(joinpath(upload_dir, pkg))
          others = filter(p -> p != pkg, pkgs)
          Pkg.develop([PackageSpec(path=joinpath(upload_dir, other)) for other in others])
          end
          '

      - name: Upload Sienna packages
        uses: actions/upload-artifact@v4
        with:
          name: sienna-packages
          path: ${{ env.UPLOAD_DIR }}
          overwrite: true
          retention-days: 1

  test:
    needs: prepare
    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: ['1']
        julia-arch: [x64]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - name: Download Sienna packages
        uses: actions/download-artifact@v4
        with:
          name: sienna-packages
          path: ${{ env.UPLOAD_DIR }}
      - name: Dev Sienna packages
        run: |
          julia -e '
            using Pkg, TOML
            pkgs = split(ENV["SIENNA_PKGS"])
            upload_dir = ENV["UPLOAD_DIR"]
            test_dir = joinpath(".", "test")
            Pkg.activate(test_dir)
            test_proj = TOML.parsefile(joinpath(test_dir, "Project.toml"))
            test_pkgs = collect(keys(test_proj["deps"]))
            @info "Test dependencies: $test_pkgs"
            pkgs_to_dev = filter(p -> splitext(p)[1] in test_pkgs && p != "PowerAnalytics.jl", pkgs)
            @info "Test packages to develop: $pkgs_to_dev"
            Pkg.develop([PackageSpec(path=joinpath(upload_dir, p)) for p in pkgs_to_dev])
            Pkg.develop(PackageSpec(path=".."))
            Pkg.update()
            Pkg.status()
          '
      - uses: julia-actions/julia-buildpkg@latest
        env:
          PYTHON: ""
      - uses: julia-actions/julia-runtest@latest
        env:
          PYTHON: ""
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: ./lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
    
  test_powersystems:
    needs: prepare
    name: Test PowerSystems.jl
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Sienna packages
        uses: actions/download-artifact@v4
        with:
          name: sienna-packages
          path: ${{ env.UPLOAD_DIR }}
      
      - uses: julia-actions/setup-julia@latest
        with:
          version: '1'
          arch: x64

      - name: Dev PowerSystems.jl
        run: |
          julia -e '
            using Pkg, TOML
            pkgs = split(ENV["SIENNA_PKGS"])
            upload_dir = ENV["UPLOAD_DIR"]
            test_dir = joinpath(upload_dir, "PowerSystems.jl", "test")
            Pkg.activate(test_dir)
            test_proj = TOML.parsefile(joinpath(test_dir, "Project.toml"))
            test_pkgs = collect(keys(test_proj["deps"]))
            @info "Test dependencies: $test_pkgs"
            pkgs_to_dev = filter(p -> splitext(p)[1] in test_pkgs && p != "PowerSystems.jl", pkgs)
            @info "Test packages to develop: $pkgs_to_dev"
            Pkg.develop([PackageSpec(path=joinpath(upload_dir, p)) for p in pkgs_to_dev])
            Pkg.develop(PackageSpec(path=".."))
            Pkg.update()
            Pkg.status()
          '
      - name: Run PowerSystems.jl tests
        uses: julia-actions/julia-runtest@latest
        with:
          project: ${{ env.UPLOAD_DIR }}/PowerSystems.jl
        env:
          PYTHON: ""
